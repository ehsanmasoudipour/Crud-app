# Generated by Django 4.2.3 on 2023-07-17 19:48

import account.helper.enums
import account.repository.manager.user
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.utils.timezone
import secrets


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Automatic insertion of recordtime in database.', verbose_name='Created')),
                ('modified', models.DateTimeField(auto_now=True, help_text='Automatic modification of recordtime in database.', verbose_name='modified')),
                ('secret', models.CharField(default=secrets.token_urlsafe, editable=False, help_text='A user secret key use for encryption and token generation.', max_length=43, unique=True)),
                ('username', models.CharField(blank=True, error_messages={'invalid': 'Username must start with characters, then it could have numbers and characters and `.`.', 'max_length': 'Username should have maxim 15 characters', 'min_length': 'Username must be at least 3 characters', 'unique': 'A user with that username already exist.'}, help_text='Required. 15 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=25, null=True, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator(), django.core.validators.RegexValidator(account.helper.enums.RegexPatternEnum['USERNAME']), django.core.validators.MaxLengthValidator(25), django.core.validators.MinLengthValidator(3)], verbose_name='Username')),
                ('first_name', models.CharField(blank=True, error_messages={'invalid': 'first_name` must start with characters, then it could have numbers and characters and `.`.', 'max_length': 'first_name should not be more than 15 characters', 'min_length': 'first_name` must be at least 3 characters', 'unique': 'A user with that username already exist.'}, help_text='Required. 15 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, null=True, validators=[django.core.validators.RegexValidator(account.helper.enums.RegexPatternEnum['NAME']), django.core.validators.MaxLengthValidator(15), django.core.validators.MinLengthValidator(3)], verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, null=True, validators=[django.core.validators.RegexValidator(account.helper.enums.RegexPatternEnum['NAME']), django.core.validators.MaxLengthValidator(15), django.core.validators.MinLengthValidator(3)], verbose_name='last name')),
                ('phone_number', models.CharField(help_text='phone number for login', max_length=15, unique=True, validators=[django.core.validators.RegexValidator(account.helper.enums.RegexPatternEnum['IRAN_PHONE_NUMBER']), django.core.validators.MaxLengthValidator(15), django.core.validators.MinLengthValidator(10)], verbose_name='Phone number')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, validators=[django.core.validators.EmailValidator('Email is invalid')], verbose_name='email address')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
            managers=[
                ('objects', account.repository.manager.user.UserDataAccessLayer()),
            ],
        ),
    ]
